@page "{machineId:int}"
@model MDE_Client.Pages.Machine.MachineModel
@{
    ViewData["Title"] = "Machine Dashboard";
}
@inject MDE_Client.Application.AuthSession AuthSession

<div class="container mt-4">
    <h2>@Model.Machine?.Name Dashboard</h2>

    @if (Model.DashboardPages != null && Model.DashboardPages.Count > 0)
    {
        <h3 class="mt-4">Dashboard</h3>
        @if (AuthSession.Role == "1" || AuthSession.Role == "2" || AuthSession.Role == "4")
        {
            <input type="hidden" id="machineId" value="@Model.MachineId" />
            <button id="startVpnBtn" class="btn btn-primary">VPN</button>
            <div id="vpnStatus"></div>

        }

        <form method="post">
            <input type="hidden" asp-for="MachineId" />
            <button type="submit" asp-page-handler="OpenDashboard" class="btn btn-success">Open Dashboard</button>
        </form>

        @if (AuthSession.Role == "1" || AuthSession.Role == "2" || AuthSession.Role == "4")
        {
            <h3 class="mt-4">Choose Dashboard Page</h3>
            <form method="post" asp-page-handler="SelectDashboardPage">
                <select asp-for="SelectedPageUrl" asp-items="@(new SelectList(Model.DashboardPages, "PageURL", "PageName"))"></select>
            <button type="submit">Set as Dashboard</button>
        </form>
        }

    }

    @if (Model.ActivityLogs != null && Model.ActivityLogs.Any())
    {
        <h3 class="mt-5">Recent Activity</h3>
        <div class="activity-log border p-3 bg-light" style="max-height: 250px; overflow-y: auto; font-size: 0.9rem;">
            <ul class="list-unstyled">
                @foreach (var log in Model.ActivityLogs.Take(10))
                {
                    <li class="mb-2">
                        <strong>@log.Timestamp.ToString("g")</strong> –
                        <span>@log.Action</span>
                        @if (!string.IsNullOrWhiteSpace(log.Target))
                        {
                            <span> → <em>@log.Target</em></span>
                        }
                    </li>
                }
            </ul>
        </div>
    }


    
   
</div>
@if (AuthSession.Role == "1" || AuthSession.Role == "2" || AuthSession.Role == "4")
{
    <script>
        document.getElementById("startVpnBtn").addEventListener("click", async () => {
        const vpnStatus = document.getElementById("vpnStatus");
        vpnStatus.innerText = "Starting VPN...";
        const machineId = document.getElementById("machineId").value;

        try {
        const response = await fetch(`/Machine/Machine/${machineId}?handler=StartVpn`, {
        method: "POST",
        headers: {
        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
        }
        });

        if (!response.ok) {
        vpnStatus.innerText = "Failed to get VPN config from server.";
        return;
        }

        const vpnCommand = await response.json();

        const localRes = await fetch("https://localhost:8787/vpn/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(vpnCommand)
        });

        vpnStatus.innerText = localRes.ok
        ? "VPN started successfully!"
        : "Local VPN service responded with error.";

        } catch (err) {
        vpnStatus.innerText = "Could not reach local VPN service. Is it installed and running?";
        console.error(err);
        }
        });
    </script>
}

