@page "{machineId:int}"
@inject HttpClient Http
@model MDE_Client.Pages.Machine.MachineModel
@{
    ViewData["Title"] = "Machine Dashboard";
}
@inject MDE_Client.Application.AuthSession AuthSession

<form method="post" asp-page-handler="Logout" class="text-end mb-3" onsubmit="stopVpnIfRunning()">
    <button type="submit" class="btn btn-danger">Logout</button>
</form>

<div class="container mt-4">
    <h2>@Model.Machine?.Name Dashboard</h2>

    
        <h3 class="mt-4">Dashboard</h3>
        @if (AuthSession.Role == "1" || AuthSession.Role == "2" || AuthSession.Role == "4")
        {
            <input type="hidden" id="machineId" value="@Model.MachineId" />
            <button id="startVpnBtn" class="btn btn-primary">VPN</button>
            <div id="vpnStatus"></div>

        }


        <form id="dashboardForm"
              method="GET"
              action="@Model.DashboardBaseUrl"
              target="_blank"
              style="display:none;">
            @foreach (var param in Model.DashboardQueryParams)
            {
                <input type="hidden" name="@param.Key" value="@param.Value" />
            }
        </form>

        @if (Model.DashboardPages != null && Model.MachineId == 1034)
    {
        <form method="post" onsubmit="submitAndOpenInNewTab(event, 'OpenDashboard')">
            <input type="hidden" asp-for="MachineId" />
        <button type="submit" class="btn btn-success">Open Dashboard</button>
    </form>
    }

       @if (Model.MachineId == 1034)
    {
        <form method="post" onsubmit="submitAndOpenInNewTab(event, 'OpenVNC')">
            <input type="hidden" asp-for="MachineId" />
        <button type="submit" class="btn btn-success">Open VNC</button>
    </form>
    }

    @if (Model.MachineId == 1041)
    {
        <form method="post" onsubmit="submitAndOpenInNewTab(event, 'OpenCamera')">
            <input type="hidden" asp-for="MachineId" />
        <button type="submit" class="btn btn-success">Open Camera</button>
    </form>
    }
   






        @if (AuthSession.Role == "1" || AuthSession.Role == "2" || AuthSession.Role == "4" && Model.DashboardPages != null && Model.MachineId == 1034)
        {
            <h3 class="mt-4">Choose Dashboard Page</h3>
            <form method="post" asp-page-handler="SelectDashboardPage">
                <select asp-for="SelectedPageUrl" asp-items="@(new SelectList(Model.DashboardPages, "PageURL", "PageName"))"></select>
            <button type="submit">Set as Dashboard</button>
        </form>
        }

    

   
        <h3 class="mt-5">Recent Activity</h3>
        <div class="activity-log border p-3 bg-light" style="max-height: 250px; overflow-y: auto; font-size: 0.9rem;">
            <ul class="list-unstyled">
                @foreach (var log in Model.ActivityLogs.Take(10))
                {
                    <li class="mb-2">
                        <strong>@log.Timestamp.ToString("g")</strong> –
                        <span>@log.Action</span>
                        @if (!string.IsNullOrWhiteSpace(log.Target))
                        {
                            <span> → <em>@log.Target</em></span>
                        }
                    </li>
                }
            </ul>
        </div>
    


    
   
</div>





<script>
    function submitAndOpenInNewTab(event, handlerName) {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);

        fetch(`${window.location.pathname}?handler=${handlerName}`, {
            method: 'POST',
            body: formData
        })
            .then(res => res.json())
            .then(data => {
                if (data.url) {
                    window.open(data.url, '_blank');
                } else {
                    alert("No URL returned.");
                }
            })
            .catch(err => console.error("Error:", err));
    }
</script>

@if (AuthSession.Role == "1" || AuthSession.Role == "2" || AuthSession.Role == "4")
{
    <script>
        let vpnRunning = false;

        document.getElementById("startVpnBtn").addEventListener("click", async () => {
            const vpnStatus = document.getElementById("vpnStatus");
            vpnStatus.innerText = vpnRunning ? "Stopping VPN..." : "Starting VPN...";
            const machineId = document.getElementById("machineId").value;

            try {
                const response = await fetch(`/Machine/Machine/${machineId}?handler=StartVpn`, {
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (!response.ok) {
                    vpnStatus.innerText = "Failed to get VPN config from server.";
                    return;
                }

                let vpnCommand = await response.json();

                // Toggle the command
                vpnCommand.Command = vpnRunning ? "stop" : "start";

                const localRes = await fetch("https://localhost:8787/vpn/", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(vpnCommand)
                });

                vpnRunning = !vpnRunning;
                vpnStatus.innerText = localRes.ok
                    ? (vpnRunning ? "VPN started." : "VPN stopped.")
                    : "Local VPN service responded with an error.";

            } catch (err) {
                vpnStatus.innerText = "Could not reach local VPN service.";
                console.error(err);
            }
        });
    </script>
}

<script>
    async function stopVpnIfRunning() {
        try {
            const stopCommand = { Command: "stop" };
            await fetch("https://localhost:8787/vpn/", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(stopCommand)
            });
            console.log("VPN stop command sent.");
        } catch (err) {
            console.warn("Failed to stop VPN:", err);
        }
    }
</script>


